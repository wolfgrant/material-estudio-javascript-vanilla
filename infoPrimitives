En el contexto de la programación y la informática, el término "primitives" (primitivas) se utiliza para referirse a tipos de datos básicos y simples que forman la base de un lenguaje de programación. Las primitivas son los bloques de construcción fundamentales que se utilizan para representar y manipular datos en un programa. Cada lenguaje de programación tiene su propio conjunto de primitivas, pero algunas son comunes en muchos de ellos. Aquí hay algunas primitivas comunes:

1. **Números Enteros (Integer):**
   - Representan números enteros sin decimales.
   - Ejemplos: 1, -5, 100.

2. **Números de Punto Flotante (Floating-Point):**
   - Representan números con decimales.
   - Ejemplos: 3.14, -0.5, 2.0.

3. **Caracteres (Character):**
   - Representan un solo carácter o símbolo.
   - Ejemplos: 'a', '1', '!'.

4. **Cadenas de Texto (String):**
   - Representan secuencias de caracteres.
   - Ejemplos: "Hola, mundo!", 'Programación'.

5. **Booleanos (Boolean):**
   - Representan valores de verdad (`true` o `false`).
   - Se utilizan en expresiones lógicas y de control de flujo.

6. **Null y Undefined:**
   - `null` se utiliza para representar la ausencia intencionada de un valor.
   - `undefined` indica que una variable ha sido declarada pero aún no ha sido inicializada.

Estas primitivas forman la base para la construcción de estructuras de datos más complejas y son esenciales para la manipulación de datos en la programación. Los tipos primitivos son a menudo inmutables, lo que significa que no se pueden cambiar directamente, y cualquier operación que parezca modificarlos en realidad crea un nuevo valor.

En algunos lenguajes de programación, como JavaScript, también se incluyen primitivas adicionales, como `BigInt` para representar números enteros grandes y `Symbol` para identificadores únicos. La comprensión de las primitivas es fundamental para escribir código efectivo y entender cómo los datos se almacenan y manipulan en un programa.

En JavaScript, el tipo de dato `Symbol` se utiliza para crear identificadores únicos e inmutables. Cada valor de `Symbol` es único, incluso si se crean múltiples símbolos con la misma descripción. Aquí tienes un ejemplo simple:

```javascript
// Crear un símbolo con una descripción
const simbolo1 = Symbol('miSimbolo');
const simbolo2 = Symbol('miSimbolo');

// Comprobar si los símbolos son iguales
console.log(simbolo1 === simbolo2); // false

// Imprimir la descripción de un símbolo
console.log(simbolo1.description); // 'miSimbolo'
console.log(simbolo2.description); // 'miSimbolo'

// Utilizar símbolos como propiedades de objetos
const objeto = {
  [simbolo1]: 'Valor del símbolo 1',
  [simbolo2]: 'Valor del símbolo 2'
};

console.log(objeto[simbolo1]); // 'Valor del símbolo 1'
console.log(objeto[simbolo2]); // 'Valor del símbolo 2'

// Obtener todas las propiedades de un objeto, incluyendo símbolos
const propiedades = Object.getOwnPropertySymbols(objeto);
console.log(propiedades); // [Symbol(miSimbolo), Symbol(miSimbolo)]
```

En este ejemplo:

- Se crean dos símbolos (`simbolo1` y `simbolo2`) con la misma descripción, pero son valores distintos.
- La comparación `simbolo1 === simbolo2` devuelve `false` porque son objetos únicos.
- La propiedad `description` se utiliza para obtener la descripción de un símbolo.
- Los símbolos se utilizan como claves para propiedades de un objeto.
- `Object.getOwnPropertySymbols(objeto)` devuelve un array con todos los símbolos utilizados como propiedades en el objeto.

Los símbolos son útiles cuando necesitas crear propiedades únicas en objetos y evita colisiones con otras propiedades. También se utilizan en situaciones donde la identidad única es esencial, como en la implementación de ciertos métodos y comportamientos en bibliotecas y frameworks.

Lo que mencionan sobre "primitives" en JavaScript está relacionado con la forma en que JavaScript maneja los tipos de datos primitivos en comparación con los objetos (que incluyen arrays y funciones).

JavaScript tiene dos categorías de tipos de datos: primitivos y objetos.

1. **Primitivos:**
   - Números
   - Cadenas (Strings)
   - Booleanos
   - Undefined
   - Null
   - Symbol (nuevo en ECMAScript 6)

   Cuando pasas un valor primitivo a una función o lo asignas a una variable, se pasa por valor. Es decir, se crea una copia independiente de ese valor. Modificar la copia no afectará la variable original.

   ```javascript
   let x = 5;

   function modifyValue(value) {
     value = 10;
     console.log(value); // 10
   }

   modifyValue(x);
   console.log(x); // 5
   ```

2. **Objetos (incluyendo Arrays y Funciones):**
   - Objetos
   - Arrays
   - Funciones
   - ...

   Cuando pasas un objeto (incluyendo arrays y funciones) a una función o lo asignas a una variable, se pasa por referencia. En este caso, la variable contiene una referencia al objeto, no una copia. Modificar el objeto afectará la variable original.

   ```javascript
   let obj = { prop: 'value' };

   function modifyObject(object) {
     object.prop = 'new value';
     console.log(object.prop); // 'new value'
   }

   modifyObject(obj);
   console.log(obj.prop); // 'new value'
   ```

Por lo tanto, la diferencia clave radica en cómo se manejan las asignaciones y las modificaciones. Los valores primitivos se pasan por valor, mientras que los objetos se pasan por referencia.

En el contexto de la cita que proporcionaste, podría referirse a que JavaScript "no sabe" si un valor es pasado por referencia o por valor, pero más específicamente, es importante comprender cómo se manejan los primitivos y los objetos en términos de copias y referencias al trabajar con funciones y asignaciones.